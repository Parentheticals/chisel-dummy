circuit Sorter :
  module Sorter :
    input clock : Clock
    input reset : UInt<1>
    output io_in_ready : UInt<1>
    input io_in_valid : UInt<1>
    input io_in_bits : UInt<5>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits : UInt<5>

    reg full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), full) @[Sorter.scala 12:21]
    reg first : UInt<1>, clock with :
      reset => (UInt<1>("h0"), first) @[Sorter.scala 13:22]
    reg nums_0 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), nums_0) @[Sorter.scala 17:42]
    reg nums_1 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), nums_1) @[Sorter.scala 17:42]
    reg nums_2 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), nums_2) @[Sorter.scala 17:42]
    reg nums_3 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), nums_3) @[Sorter.scala 17:42]
    reg nums_4 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), nums_4) @[Sorter.scala 17:42]
    reg nums_5 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), nums_5) @[Sorter.scala 17:42]
    reg nums_6 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), nums_6) @[Sorter.scala 17:42]
    reg nums_7 : UInt<5>, clock with :
      reset => (UInt<1>("h0"), nums_7) @[Sorter.scala 17:42]
    node _T = eq(full, UInt<1>("h0")) @[Sorter.scala 26:13]
    node _T_1 = leq(nums_0, io_in_bits) @[Sorter.scala 28:18]
    node _T_2 = lt(io_in_bits, nums_1) @[Sorter.scala 28:48]
    node _T_3 = eq(nums_1, UInt<1>("h0")) @[Sorter.scala 28:57]
    node _T_4 = or(_T_2, _T_3) @[Sorter.scala 28:52]
    node _T_5 = and(_T_1, _T_4) @[Sorter.scala 28:33]
    node _T_6 = neq(nums_0, UInt<1>("h0")) @[Sorter.scala 30:19]
    node _T_7 = neq(nums_1, UInt<1>("h0")) @[Sorter.scala 30:32]
    node _T_8 = or(_T_6, _T_7) @[Sorter.scala 30:27]
    node _GEN_0 = mux(_T_8, io_in_bits, nums_1) @[Sorter.scala 30:41 Sorter.scala 31:15 Sorter.scala 17:42]
    node _T_9 = lt(io_in_bits, nums_1) @[Sorter.scala 35:29]
    node _T_10 = eq(nums_1, UInt<1>("h0")) @[Sorter.scala 35:39]
    node _T_11 = or(_T_9, _T_10) @[Sorter.scala 35:34]
    node _GEN_1 = mux(_T_11, nums_0, nums_1) @[Sorter.scala 35:48 Sorter.scala 36:15 Sorter.scala 17:42]
    node _GEN_2 = mux(_T_5, _GEN_0, _GEN_1) @[Sorter.scala 28:67]
    node _GEN_3 = mux(io_out_ready, nums_0, nums_1) @[Sorter.scala 41:29 Sorter.scala 42:13 Sorter.scala 17:42]
    node _GEN_4 = mux(_T, _GEN_2, _GEN_3) @[Sorter.scala 26:20]
    node _T_12 = eq(full, UInt<1>("h0")) @[Sorter.scala 26:13]
    node _T_13 = leq(nums_1, io_in_bits) @[Sorter.scala 28:18]
    node _T_14 = lt(io_in_bits, nums_2) @[Sorter.scala 28:48]
    node _T_15 = eq(nums_2, UInt<1>("h0")) @[Sorter.scala 28:57]
    node _T_16 = or(_T_14, _T_15) @[Sorter.scala 28:52]
    node _T_17 = and(_T_13, _T_16) @[Sorter.scala 28:33]
    node _T_18 = neq(nums_1, UInt<1>("h0")) @[Sorter.scala 30:19]
    node _T_19 = neq(nums_2, UInt<1>("h0")) @[Sorter.scala 30:32]
    node _T_20 = or(_T_18, _T_19) @[Sorter.scala 30:27]
    node _GEN_5 = mux(_T_20, io_in_bits, nums_2) @[Sorter.scala 30:41 Sorter.scala 31:15 Sorter.scala 17:42]
    node _T_21 = lt(io_in_bits, nums_2) @[Sorter.scala 35:29]
    node _T_22 = eq(nums_2, UInt<1>("h0")) @[Sorter.scala 35:39]
    node _T_23 = or(_T_21, _T_22) @[Sorter.scala 35:34]
    node _GEN_6 = mux(_T_23, nums_1, nums_2) @[Sorter.scala 35:48 Sorter.scala 36:15 Sorter.scala 17:42]
    node _GEN_7 = mux(_T_17, _GEN_5, _GEN_6) @[Sorter.scala 28:67]
    node _GEN_8 = mux(io_out_ready, nums_1, nums_2) @[Sorter.scala 41:29 Sorter.scala 42:13 Sorter.scala 17:42]
    node _GEN_9 = mux(_T_12, _GEN_7, _GEN_8) @[Sorter.scala 26:20]
    node _T_24 = eq(full, UInt<1>("h0")) @[Sorter.scala 26:13]
    node _T_25 = leq(nums_2, io_in_bits) @[Sorter.scala 28:18]
    node _T_26 = lt(io_in_bits, nums_3) @[Sorter.scala 28:48]
    node _T_27 = eq(nums_3, UInt<1>("h0")) @[Sorter.scala 28:57]
    node _T_28 = or(_T_26, _T_27) @[Sorter.scala 28:52]
    node _T_29 = and(_T_25, _T_28) @[Sorter.scala 28:33]
    node _T_30 = neq(nums_2, UInt<1>("h0")) @[Sorter.scala 30:19]
    node _T_31 = neq(nums_3, UInt<1>("h0")) @[Sorter.scala 30:32]
    node _T_32 = or(_T_30, _T_31) @[Sorter.scala 30:27]
    node _GEN_10 = mux(_T_32, io_in_bits, nums_3) @[Sorter.scala 30:41 Sorter.scala 31:15 Sorter.scala 17:42]
    node _T_33 = lt(io_in_bits, nums_3) @[Sorter.scala 35:29]
    node _T_34 = eq(nums_3, UInt<1>("h0")) @[Sorter.scala 35:39]
    node _T_35 = or(_T_33, _T_34) @[Sorter.scala 35:34]
    node _GEN_11 = mux(_T_35, nums_2, nums_3) @[Sorter.scala 35:48 Sorter.scala 36:15 Sorter.scala 17:42]
    node _GEN_12 = mux(_T_29, _GEN_10, _GEN_11) @[Sorter.scala 28:67]
    node _GEN_13 = mux(io_out_ready, nums_2, nums_3) @[Sorter.scala 41:29 Sorter.scala 42:13 Sorter.scala 17:42]
    node _GEN_14 = mux(_T_24, _GEN_12, _GEN_13) @[Sorter.scala 26:20]
    node _T_36 = eq(full, UInt<1>("h0")) @[Sorter.scala 26:13]
    node _T_37 = leq(nums_3, io_in_bits) @[Sorter.scala 28:18]
    node _T_38 = lt(io_in_bits, nums_4) @[Sorter.scala 28:48]
    node _T_39 = eq(nums_4, UInt<1>("h0")) @[Sorter.scala 28:57]
    node _T_40 = or(_T_38, _T_39) @[Sorter.scala 28:52]
    node _T_41 = and(_T_37, _T_40) @[Sorter.scala 28:33]
    node _T_42 = neq(nums_3, UInt<1>("h0")) @[Sorter.scala 30:19]
    node _T_43 = neq(nums_4, UInt<1>("h0")) @[Sorter.scala 30:32]
    node _T_44 = or(_T_42, _T_43) @[Sorter.scala 30:27]
    node _GEN_15 = mux(_T_44, io_in_bits, nums_4) @[Sorter.scala 30:41 Sorter.scala 31:15 Sorter.scala 17:42]
    node _T_45 = lt(io_in_bits, nums_4) @[Sorter.scala 35:29]
    node _T_46 = eq(nums_4, UInt<1>("h0")) @[Sorter.scala 35:39]
    node _T_47 = or(_T_45, _T_46) @[Sorter.scala 35:34]
    node _GEN_16 = mux(_T_47, nums_3, nums_4) @[Sorter.scala 35:48 Sorter.scala 36:15 Sorter.scala 17:42]
    node _GEN_17 = mux(_T_41, _GEN_15, _GEN_16) @[Sorter.scala 28:67]
    node _GEN_18 = mux(io_out_ready, nums_3, nums_4) @[Sorter.scala 41:29 Sorter.scala 42:13 Sorter.scala 17:42]
    node _GEN_19 = mux(_T_36, _GEN_17, _GEN_18) @[Sorter.scala 26:20]
    node _T_48 = eq(full, UInt<1>("h0")) @[Sorter.scala 26:13]
    node _T_49 = leq(nums_4, io_in_bits) @[Sorter.scala 28:18]
    node _T_50 = lt(io_in_bits, nums_5) @[Sorter.scala 28:48]
    node _T_51 = eq(nums_5, UInt<1>("h0")) @[Sorter.scala 28:57]
    node _T_52 = or(_T_50, _T_51) @[Sorter.scala 28:52]
    node _T_53 = and(_T_49, _T_52) @[Sorter.scala 28:33]
    node _T_54 = neq(nums_4, UInt<1>("h0")) @[Sorter.scala 30:19]
    node _T_55 = neq(nums_5, UInt<1>("h0")) @[Sorter.scala 30:32]
    node _T_56 = or(_T_54, _T_55) @[Sorter.scala 30:27]
    node _GEN_20 = mux(_T_56, io_in_bits, nums_5) @[Sorter.scala 30:41 Sorter.scala 31:15 Sorter.scala 17:42]
    node _T_57 = lt(io_in_bits, nums_5) @[Sorter.scala 35:29]
    node _T_58 = eq(nums_5, UInt<1>("h0")) @[Sorter.scala 35:39]
    node _T_59 = or(_T_57, _T_58) @[Sorter.scala 35:34]
    node _GEN_21 = mux(_T_59, nums_4, nums_5) @[Sorter.scala 35:48 Sorter.scala 36:15 Sorter.scala 17:42]
    node _GEN_22 = mux(_T_53, _GEN_20, _GEN_21) @[Sorter.scala 28:67]
    node _GEN_23 = mux(io_out_ready, nums_4, nums_5) @[Sorter.scala 41:29 Sorter.scala 42:13 Sorter.scala 17:42]
    node _GEN_24 = mux(_T_48, _GEN_22, _GEN_23) @[Sorter.scala 26:20]
    node _T_60 = eq(full, UInt<1>("h0")) @[Sorter.scala 26:13]
    node _T_61 = leq(nums_5, io_in_bits) @[Sorter.scala 28:18]
    node _T_62 = lt(io_in_bits, nums_6) @[Sorter.scala 28:48]
    node _T_63 = eq(nums_6, UInt<1>("h0")) @[Sorter.scala 28:57]
    node _T_64 = or(_T_62, _T_63) @[Sorter.scala 28:52]
    node _T_65 = and(_T_61, _T_64) @[Sorter.scala 28:33]
    node _T_66 = neq(nums_5, UInt<1>("h0")) @[Sorter.scala 30:19]
    node _T_67 = neq(nums_6, UInt<1>("h0")) @[Sorter.scala 30:32]
    node _T_68 = or(_T_66, _T_67) @[Sorter.scala 30:27]
    node _GEN_25 = mux(_T_68, io_in_bits, nums_6) @[Sorter.scala 30:41 Sorter.scala 31:15 Sorter.scala 17:42]
    node _T_69 = lt(io_in_bits, nums_6) @[Sorter.scala 35:29]
    node _T_70 = eq(nums_6, UInt<1>("h0")) @[Sorter.scala 35:39]
    node _T_71 = or(_T_69, _T_70) @[Sorter.scala 35:34]
    node _GEN_26 = mux(_T_71, nums_5, nums_6) @[Sorter.scala 35:48 Sorter.scala 36:15 Sorter.scala 17:42]
    node _GEN_27 = mux(_T_65, _GEN_25, _GEN_26) @[Sorter.scala 28:67]
    node _GEN_28 = mux(io_out_ready, nums_5, nums_6) @[Sorter.scala 41:29 Sorter.scala 42:13 Sorter.scala 17:42]
    node _GEN_29 = mux(_T_60, _GEN_27, _GEN_28) @[Sorter.scala 26:20]
    node _T_72 = eq(full, UInt<1>("h0")) @[Sorter.scala 26:13]
    node _T_73 = leq(nums_6, io_in_bits) @[Sorter.scala 28:18]
    node _T_74 = lt(io_in_bits, nums_7) @[Sorter.scala 28:48]
    node _T_75 = eq(nums_7, UInt<1>("h0")) @[Sorter.scala 28:57]
    node _T_76 = or(_T_74, _T_75) @[Sorter.scala 28:52]
    node _T_77 = and(_T_73, _T_76) @[Sorter.scala 28:33]
    node _T_78 = neq(nums_6, UInt<1>("h0")) @[Sorter.scala 30:19]
    node _T_79 = neq(nums_7, UInt<1>("h0")) @[Sorter.scala 30:32]
    node _T_80 = or(_T_78, _T_79) @[Sorter.scala 30:27]
    node _GEN_30 = mux(_T_80, io_in_bits, nums_7) @[Sorter.scala 30:41 Sorter.scala 31:15 Sorter.scala 17:42]
    node _T_81 = lt(io_in_bits, nums_7) @[Sorter.scala 35:29]
    node _T_82 = eq(nums_7, UInt<1>("h0")) @[Sorter.scala 35:39]
    node _T_83 = or(_T_81, _T_82) @[Sorter.scala 35:34]
    node _GEN_31 = mux(_T_83, nums_6, nums_7) @[Sorter.scala 35:48 Sorter.scala 36:15 Sorter.scala 17:42]
    node _GEN_32 = mux(_T_77, _GEN_30, _GEN_31) @[Sorter.scala 28:67]
    node _GEN_33 = mux(io_out_ready, nums_6, nums_7) @[Sorter.scala 41:29 Sorter.scala 42:13 Sorter.scala 17:42]
    node _GEN_34 = mux(_T_72, _GEN_32, _GEN_33) @[Sorter.scala 26:20]
    node _GEN_35 = mux(first, io_in_bits, _GEN_4) @[Sorter.scala 20:14 Sorter.scala 21:13]
    node _GEN_36 = mux(first, UInt<1>("h0"), UInt<1>("h0")) @[Sorter.scala 20:14 Sorter.scala 22:11 Sorter.scala 46:11]
    node _GEN_37 = mux(first, nums_2, _GEN_9) @[Sorter.scala 20:14 Sorter.scala 17:42]
    node _GEN_38 = mux(first, nums_3, _GEN_14) @[Sorter.scala 20:14 Sorter.scala 17:42]
    node _GEN_39 = mux(first, nums_4, _GEN_19) @[Sorter.scala 20:14 Sorter.scala 17:42]
    node _GEN_40 = mux(first, nums_5, _GEN_24) @[Sorter.scala 20:14 Sorter.scala 17:42]
    node _GEN_41 = mux(first, nums_6, _GEN_29) @[Sorter.scala 20:14 Sorter.scala 17:42]
    node _GEN_42 = mux(first, nums_7, _GEN_34) @[Sorter.scala 20:14 Sorter.scala 17:42]
    reg value : UInt<3>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40]
    reg value_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40]
    node _T_84 = eq(full, UInt<1>("h0")) @[Sorter.scala 54:24]
    node _T_85 = and(io_in_valid, _T_84) @[Sorter.scala 54:21]
    node _T_86 = eq(value, UInt<3>("h6")) @[Sorter.scala 55:25]
    node wrap = eq(value, UInt<3>("h6")) @[Counter.scala 72:24]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
    node _GEN_43 = mux(wrap, UInt<1>("h0"), _value_T_1) @[Counter.scala 86:20 Counter.scala 86:28 Counter.scala 76:15]
    node _GEN_44 = mux(_T_86, UInt<1>("h1"), UInt<1>("h0")) @[Sorter.scala 55:45 Sorter.scala 56:12 Sorter.scala 59:12]
    node _GEN_45 = mux(_T_86, UInt<1>("h0"), value_1) @[Sorter.scala 55:45 Counter.scala 97:11 Counter.scala 60:40]
    node _GEN_46 = mux(_T_86, value, _GEN_43) @[Sorter.scala 55:45 Counter.scala 60:40]
    node _GEN_47 = mux(_T_85, _GEN_44, UInt<1>("h0")) @[Sorter.scala 54:31 Sorter.scala 15:8]
    node _GEN_48 = mux(_T_85, _GEN_45, value_1) @[Sorter.scala 54:31 Counter.scala 60:40]
    node _GEN_49 = mux(_T_85, _GEN_46, value) @[Sorter.scala 54:31 Counter.scala 60:40]
    node _T_87 = and(full, io_out_ready) @[Sorter.scala 65:13]
    node _T_88 = eq(value_1, UInt<3>("h6")) @[Sorter.scala 66:26]
    node wrap_1 = eq(value_1, UInt<3>("h6")) @[Counter.scala 72:24]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
    node _GEN_50 = mux(wrap_1, UInt<1>("h0"), _value_T_3) @[Counter.scala 86:20 Counter.scala 86:28 Counter.scala 76:15]
    node _GEN_51 = mux(_T_88, UInt<1>("h0"), UInt<1>("h1")) @[Sorter.scala 66:46 Sorter.scala 67:12 Sorter.scala 71:12]
    node _GEN_52 = mux(_T_88, UInt<1>("h1"), _GEN_36) @[Sorter.scala 66:46 Sorter.scala 68:13]
    node _GEN_53 = mux(_T_88, UInt<1>("h0"), _GEN_49) @[Sorter.scala 66:46 Counter.scala 97:11]
    node _GEN_54 = mux(_T_88, _GEN_48, _GEN_50) @[Sorter.scala 66:46]
    node _GEN_55 = mux(_T_87, _GEN_51, _GEN_47) @[Sorter.scala 65:30]
    node _GEN_56 = mux(_T_87, _GEN_52, _GEN_36) @[Sorter.scala 65:30]
    node _GEN_57 = mux(_T_87, _GEN_53, _GEN_49) @[Sorter.scala 65:30]
    node _GEN_58 = mux(_T_87, _GEN_54, _GEN_48) @[Sorter.scala 65:30]
    node _io_in_ready_T = eq(full, UInt<1>("h0")) @[Sorter.scala 79:18]
    io_in_ready <= _io_in_ready_T @[Sorter.scala 79:15]
    io_out_valid <= full @[Sorter.scala 78:16]
    io_out_bits <= nums_7 @[Sorter.scala 77:15]
    full <= mux(reset, UInt<1>("h0"), _GEN_55) @[Sorter.scala 12:21 Sorter.scala 12:21]
    first <= mux(reset, UInt<1>("h1"), _GEN_56) @[Sorter.scala 13:22 Sorter.scala 13:22]
    nums_0 <= mux(reset, UInt<1>("h0"), nums_0) @[Sorter.scala 17:42 Sorter.scala 17:42 Sorter.scala 17:42]
    nums_1 <= mux(reset, UInt<1>("h0"), _GEN_35) @[Sorter.scala 17:42 Sorter.scala 17:42]
    nums_2 <= mux(reset, UInt<1>("h0"), _GEN_37) @[Sorter.scala 17:42 Sorter.scala 17:42]
    nums_3 <= mux(reset, UInt<1>("h0"), _GEN_38) @[Sorter.scala 17:42 Sorter.scala 17:42]
    nums_4 <= mux(reset, UInt<1>("h0"), _GEN_39) @[Sorter.scala 17:42 Sorter.scala 17:42]
    nums_5 <= mux(reset, UInt<1>("h0"), _GEN_40) @[Sorter.scala 17:42 Sorter.scala 17:42]
    nums_6 <= mux(reset, UInt<1>("h0"), _GEN_41) @[Sorter.scala 17:42 Sorter.scala 17:42]
    nums_7 <= mux(reset, UInt<1>("h0"), _GEN_42) @[Sorter.scala 17:42 Sorter.scala 17:42]
    value <= mux(reset, UInt<3>("h0"), _GEN_57) @[Counter.scala 60:40 Counter.scala 60:40]
    value_1 <= mux(reset, UInt<3>("h0"), _GEN_58) @[Counter.scala 60:40 Counter.scala 60:40]
