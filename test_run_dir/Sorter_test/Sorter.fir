;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Sorter : 
  module Sorter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<5>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<5>}}
    
    reg full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 12:21]
    reg first : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Sorter.scala 13:22]
    full <= UInt<1>("h00") @[Sorter.scala 15:8]
    reg nums_0 : UInt<5>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 17:42]
    reg nums_1 : UInt<5>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 17:42]
    reg nums_2 : UInt<5>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 17:42]
    reg nums_3 : UInt<5>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 17:42]
    reg nums_4 : UInt<5>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 17:42]
    reg nums_5 : UInt<5>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 17:42]
    reg nums_6 : UInt<5>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 17:42]
    reg nums_7 : UInt<5>, clock with : (reset => (reset, UInt<1>("h00"))) @[Sorter.scala 17:42]
    when first : @[Sorter.scala 20:14]
      nums_1 <= io.in.bits @[Sorter.scala 21:13]
      first <= UInt<1>("h00") @[Sorter.scala 22:11]
      skip @[Sorter.scala 20:14]
    else : @[Sorter.scala 23:14]
      node _T = eq(full, UInt<1>("h00")) @[Sorter.scala 26:13]
      when _T : @[Sorter.scala 26:20]
        node _T_1 = leq(nums_0, io.in.bits) @[Sorter.scala 28:18]
        node _T_2 = lt(io.in.bits, nums_1) @[Sorter.scala 28:48]
        node _T_3 = eq(nums_1, UInt<1>("h00")) @[Sorter.scala 28:57]
        node _T_4 = or(_T_2, _T_3) @[Sorter.scala 28:52]
        node _T_5 = and(_T_1, _T_4) @[Sorter.scala 28:33]
        when _T_5 : @[Sorter.scala 28:67]
          node _T_6 = neq(nums_0, UInt<1>("h00")) @[Sorter.scala 30:19]
          node _T_7 = neq(nums_1, UInt<1>("h00")) @[Sorter.scala 30:32]
          node _T_8 = or(_T_6, _T_7) @[Sorter.scala 30:27]
          when _T_8 : @[Sorter.scala 30:41]
            nums_1 <= io.in.bits @[Sorter.scala 31:15]
            skip @[Sorter.scala 30:41]
          skip @[Sorter.scala 28:67]
        else : @[Sorter.scala 33:21]
          node _T_9 = lt(io.in.bits, nums_1) @[Sorter.scala 35:29]
          node _T_10 = eq(nums_1, UInt<1>("h00")) @[Sorter.scala 35:39]
          node _T_11 = or(_T_9, _T_10) @[Sorter.scala 35:34]
          when _T_11 : @[Sorter.scala 35:48]
            nums_1 <= nums_0 @[Sorter.scala 36:15]
            skip @[Sorter.scala 35:48]
          skip @[Sorter.scala 33:21]
        skip @[Sorter.scala 26:20]
      else : @[Sorter.scala 39:18]
        when io.out.ready : @[Sorter.scala 41:29]
          nums_1 <= nums_0 @[Sorter.scala 42:13]
          skip @[Sorter.scala 41:29]
        skip @[Sorter.scala 39:18]
      node _T_12 = eq(full, UInt<1>("h00")) @[Sorter.scala 26:13]
      when _T_12 : @[Sorter.scala 26:20]
        node _T_13 = leq(nums_1, io.in.bits) @[Sorter.scala 28:18]
        node _T_14 = lt(io.in.bits, nums_2) @[Sorter.scala 28:48]
        node _T_15 = eq(nums_2, UInt<1>("h00")) @[Sorter.scala 28:57]
        node _T_16 = or(_T_14, _T_15) @[Sorter.scala 28:52]
        node _T_17 = and(_T_13, _T_16) @[Sorter.scala 28:33]
        when _T_17 : @[Sorter.scala 28:67]
          node _T_18 = neq(nums_1, UInt<1>("h00")) @[Sorter.scala 30:19]
          node _T_19 = neq(nums_2, UInt<1>("h00")) @[Sorter.scala 30:32]
          node _T_20 = or(_T_18, _T_19) @[Sorter.scala 30:27]
          when _T_20 : @[Sorter.scala 30:41]
            nums_2 <= io.in.bits @[Sorter.scala 31:15]
            skip @[Sorter.scala 30:41]
          skip @[Sorter.scala 28:67]
        else : @[Sorter.scala 33:21]
          node _T_21 = lt(io.in.bits, nums_2) @[Sorter.scala 35:29]
          node _T_22 = eq(nums_2, UInt<1>("h00")) @[Sorter.scala 35:39]
          node _T_23 = or(_T_21, _T_22) @[Sorter.scala 35:34]
          when _T_23 : @[Sorter.scala 35:48]
            nums_2 <= nums_1 @[Sorter.scala 36:15]
            skip @[Sorter.scala 35:48]
          skip @[Sorter.scala 33:21]
        skip @[Sorter.scala 26:20]
      else : @[Sorter.scala 39:18]
        when io.out.ready : @[Sorter.scala 41:29]
          nums_2 <= nums_1 @[Sorter.scala 42:13]
          skip @[Sorter.scala 41:29]
        skip @[Sorter.scala 39:18]
      node _T_24 = eq(full, UInt<1>("h00")) @[Sorter.scala 26:13]
      when _T_24 : @[Sorter.scala 26:20]
        node _T_25 = leq(nums_2, io.in.bits) @[Sorter.scala 28:18]
        node _T_26 = lt(io.in.bits, nums_3) @[Sorter.scala 28:48]
        node _T_27 = eq(nums_3, UInt<1>("h00")) @[Sorter.scala 28:57]
        node _T_28 = or(_T_26, _T_27) @[Sorter.scala 28:52]
        node _T_29 = and(_T_25, _T_28) @[Sorter.scala 28:33]
        when _T_29 : @[Sorter.scala 28:67]
          node _T_30 = neq(nums_2, UInt<1>("h00")) @[Sorter.scala 30:19]
          node _T_31 = neq(nums_3, UInt<1>("h00")) @[Sorter.scala 30:32]
          node _T_32 = or(_T_30, _T_31) @[Sorter.scala 30:27]
          when _T_32 : @[Sorter.scala 30:41]
            nums_3 <= io.in.bits @[Sorter.scala 31:15]
            skip @[Sorter.scala 30:41]
          skip @[Sorter.scala 28:67]
        else : @[Sorter.scala 33:21]
          node _T_33 = lt(io.in.bits, nums_3) @[Sorter.scala 35:29]
          node _T_34 = eq(nums_3, UInt<1>("h00")) @[Sorter.scala 35:39]
          node _T_35 = or(_T_33, _T_34) @[Sorter.scala 35:34]
          when _T_35 : @[Sorter.scala 35:48]
            nums_3 <= nums_2 @[Sorter.scala 36:15]
            skip @[Sorter.scala 35:48]
          skip @[Sorter.scala 33:21]
        skip @[Sorter.scala 26:20]
      else : @[Sorter.scala 39:18]
        when io.out.ready : @[Sorter.scala 41:29]
          nums_3 <= nums_2 @[Sorter.scala 42:13]
          skip @[Sorter.scala 41:29]
        skip @[Sorter.scala 39:18]
      node _T_36 = eq(full, UInt<1>("h00")) @[Sorter.scala 26:13]
      when _T_36 : @[Sorter.scala 26:20]
        node _T_37 = leq(nums_3, io.in.bits) @[Sorter.scala 28:18]
        node _T_38 = lt(io.in.bits, nums_4) @[Sorter.scala 28:48]
        node _T_39 = eq(nums_4, UInt<1>("h00")) @[Sorter.scala 28:57]
        node _T_40 = or(_T_38, _T_39) @[Sorter.scala 28:52]
        node _T_41 = and(_T_37, _T_40) @[Sorter.scala 28:33]
        when _T_41 : @[Sorter.scala 28:67]
          node _T_42 = neq(nums_3, UInt<1>("h00")) @[Sorter.scala 30:19]
          node _T_43 = neq(nums_4, UInt<1>("h00")) @[Sorter.scala 30:32]
          node _T_44 = or(_T_42, _T_43) @[Sorter.scala 30:27]
          when _T_44 : @[Sorter.scala 30:41]
            nums_4 <= io.in.bits @[Sorter.scala 31:15]
            skip @[Sorter.scala 30:41]
          skip @[Sorter.scala 28:67]
        else : @[Sorter.scala 33:21]
          node _T_45 = lt(io.in.bits, nums_4) @[Sorter.scala 35:29]
          node _T_46 = eq(nums_4, UInt<1>("h00")) @[Sorter.scala 35:39]
          node _T_47 = or(_T_45, _T_46) @[Sorter.scala 35:34]
          when _T_47 : @[Sorter.scala 35:48]
            nums_4 <= nums_3 @[Sorter.scala 36:15]
            skip @[Sorter.scala 35:48]
          skip @[Sorter.scala 33:21]
        skip @[Sorter.scala 26:20]
      else : @[Sorter.scala 39:18]
        when io.out.ready : @[Sorter.scala 41:29]
          nums_4 <= nums_3 @[Sorter.scala 42:13]
          skip @[Sorter.scala 41:29]
        skip @[Sorter.scala 39:18]
      node _T_48 = eq(full, UInt<1>("h00")) @[Sorter.scala 26:13]
      when _T_48 : @[Sorter.scala 26:20]
        node _T_49 = leq(nums_4, io.in.bits) @[Sorter.scala 28:18]
        node _T_50 = lt(io.in.bits, nums_5) @[Sorter.scala 28:48]
        node _T_51 = eq(nums_5, UInt<1>("h00")) @[Sorter.scala 28:57]
        node _T_52 = or(_T_50, _T_51) @[Sorter.scala 28:52]
        node _T_53 = and(_T_49, _T_52) @[Sorter.scala 28:33]
        when _T_53 : @[Sorter.scala 28:67]
          node _T_54 = neq(nums_4, UInt<1>("h00")) @[Sorter.scala 30:19]
          node _T_55 = neq(nums_5, UInt<1>("h00")) @[Sorter.scala 30:32]
          node _T_56 = or(_T_54, _T_55) @[Sorter.scala 30:27]
          when _T_56 : @[Sorter.scala 30:41]
            nums_5 <= io.in.bits @[Sorter.scala 31:15]
            skip @[Sorter.scala 30:41]
          skip @[Sorter.scala 28:67]
        else : @[Sorter.scala 33:21]
          node _T_57 = lt(io.in.bits, nums_5) @[Sorter.scala 35:29]
          node _T_58 = eq(nums_5, UInt<1>("h00")) @[Sorter.scala 35:39]
          node _T_59 = or(_T_57, _T_58) @[Sorter.scala 35:34]
          when _T_59 : @[Sorter.scala 35:48]
            nums_5 <= nums_4 @[Sorter.scala 36:15]
            skip @[Sorter.scala 35:48]
          skip @[Sorter.scala 33:21]
        skip @[Sorter.scala 26:20]
      else : @[Sorter.scala 39:18]
        when io.out.ready : @[Sorter.scala 41:29]
          nums_5 <= nums_4 @[Sorter.scala 42:13]
          skip @[Sorter.scala 41:29]
        skip @[Sorter.scala 39:18]
      node _T_60 = eq(full, UInt<1>("h00")) @[Sorter.scala 26:13]
      when _T_60 : @[Sorter.scala 26:20]
        node _T_61 = leq(nums_5, io.in.bits) @[Sorter.scala 28:18]
        node _T_62 = lt(io.in.bits, nums_6) @[Sorter.scala 28:48]
        node _T_63 = eq(nums_6, UInt<1>("h00")) @[Sorter.scala 28:57]
        node _T_64 = or(_T_62, _T_63) @[Sorter.scala 28:52]
        node _T_65 = and(_T_61, _T_64) @[Sorter.scala 28:33]
        when _T_65 : @[Sorter.scala 28:67]
          node _T_66 = neq(nums_5, UInt<1>("h00")) @[Sorter.scala 30:19]
          node _T_67 = neq(nums_6, UInt<1>("h00")) @[Sorter.scala 30:32]
          node _T_68 = or(_T_66, _T_67) @[Sorter.scala 30:27]
          when _T_68 : @[Sorter.scala 30:41]
            nums_6 <= io.in.bits @[Sorter.scala 31:15]
            skip @[Sorter.scala 30:41]
          skip @[Sorter.scala 28:67]
        else : @[Sorter.scala 33:21]
          node _T_69 = lt(io.in.bits, nums_6) @[Sorter.scala 35:29]
          node _T_70 = eq(nums_6, UInt<1>("h00")) @[Sorter.scala 35:39]
          node _T_71 = or(_T_69, _T_70) @[Sorter.scala 35:34]
          when _T_71 : @[Sorter.scala 35:48]
            nums_6 <= nums_5 @[Sorter.scala 36:15]
            skip @[Sorter.scala 35:48]
          skip @[Sorter.scala 33:21]
        skip @[Sorter.scala 26:20]
      else : @[Sorter.scala 39:18]
        when io.out.ready : @[Sorter.scala 41:29]
          nums_6 <= nums_5 @[Sorter.scala 42:13]
          skip @[Sorter.scala 41:29]
        skip @[Sorter.scala 39:18]
      node _T_72 = eq(full, UInt<1>("h00")) @[Sorter.scala 26:13]
      when _T_72 : @[Sorter.scala 26:20]
        node _T_73 = leq(nums_6, io.in.bits) @[Sorter.scala 28:18]
        node _T_74 = lt(io.in.bits, nums_7) @[Sorter.scala 28:48]
        node _T_75 = eq(nums_7, UInt<1>("h00")) @[Sorter.scala 28:57]
        node _T_76 = or(_T_74, _T_75) @[Sorter.scala 28:52]
        node _T_77 = and(_T_73, _T_76) @[Sorter.scala 28:33]
        when _T_77 : @[Sorter.scala 28:67]
          node _T_78 = neq(nums_6, UInt<1>("h00")) @[Sorter.scala 30:19]
          node _T_79 = neq(nums_7, UInt<1>("h00")) @[Sorter.scala 30:32]
          node _T_80 = or(_T_78, _T_79) @[Sorter.scala 30:27]
          when _T_80 : @[Sorter.scala 30:41]
            nums_7 <= io.in.bits @[Sorter.scala 31:15]
            skip @[Sorter.scala 30:41]
          skip @[Sorter.scala 28:67]
        else : @[Sorter.scala 33:21]
          node _T_81 = lt(io.in.bits, nums_7) @[Sorter.scala 35:29]
          node _T_82 = eq(nums_7, UInt<1>("h00")) @[Sorter.scala 35:39]
          node _T_83 = or(_T_81, _T_82) @[Sorter.scala 35:34]
          when _T_83 : @[Sorter.scala 35:48]
            nums_7 <= nums_6 @[Sorter.scala 36:15]
            skip @[Sorter.scala 35:48]
          skip @[Sorter.scala 33:21]
        skip @[Sorter.scala 26:20]
      else : @[Sorter.scala 39:18]
        when io.out.ready : @[Sorter.scala 41:29]
          nums_7 <= nums_6 @[Sorter.scala 42:13]
          skip @[Sorter.scala 41:29]
        skip @[Sorter.scala 39:18]
      first <= UInt<1>("h00") @[Sorter.scala 46:11]
      skip @[Sorter.scala 23:14]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 60:40]
    reg value_1 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 60:40]
    node _T_84 = eq(full, UInt<1>("h00")) @[Sorter.scala 54:24]
    node _T_85 = and(io.in.valid, _T_84) @[Sorter.scala 54:21]
    when _T_85 : @[Sorter.scala 54:31]
      node _T_86 = eq(value, UInt<3>("h06")) @[Sorter.scala 55:25]
      when _T_86 : @[Sorter.scala 55:45]
        full <= UInt<1>("h01") @[Sorter.scala 56:12]
        value_1 <= UInt<1>("h00") @[Counter.scala 97:11]
        skip @[Sorter.scala 55:45]
      else : @[Sorter.scala 58:16]
        full <= UInt<1>("h00") @[Sorter.scala 59:12]
        node wrap = eq(value, UInt<3>("h06")) @[Counter.scala 72:24]
        node _value_T = add(value, UInt<1>("h01")) @[Counter.scala 76:24]
        node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
        value <= _value_T_1 @[Counter.scala 76:15]
        when wrap : @[Counter.scala 86:20]
          value <= UInt<1>("h00") @[Counter.scala 86:28]
          skip @[Counter.scala 86:20]
        skip @[Sorter.scala 58:16]
      skip @[Sorter.scala 54:31]
    node _T_87 = and(full, io.out.ready) @[Sorter.scala 65:13]
    when _T_87 : @[Sorter.scala 65:30]
      node _T_88 = eq(value_1, UInt<3>("h06")) @[Sorter.scala 66:26]
      when _T_88 : @[Sorter.scala 66:46]
        full <= UInt<1>("h00") @[Sorter.scala 67:12]
        first <= UInt<1>("h01") @[Sorter.scala 68:13]
        value <= UInt<1>("h00") @[Counter.scala 97:11]
        skip @[Sorter.scala 66:46]
      else : @[Sorter.scala 70:16]
        full <= UInt<1>("h01") @[Sorter.scala 71:12]
        node wrap_1 = eq(value_1, UInt<3>("h06")) @[Counter.scala 72:24]
        node _value_T_2 = add(value_1, UInt<1>("h01")) @[Counter.scala 76:24]
        node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24]
        value_1 <= _value_T_3 @[Counter.scala 76:15]
        when wrap_1 : @[Counter.scala 86:20]
          value_1 <= UInt<1>("h00") @[Counter.scala 86:28]
          skip @[Counter.scala 86:20]
        skip @[Sorter.scala 70:16]
      skip @[Sorter.scala 65:30]
    io.out.bits <= nums_7 @[Sorter.scala 77:15]
    io.out.valid <= full @[Sorter.scala 78:16]
    node _io_in_ready_T = eq(full, UInt<1>("h00")) @[Sorter.scala 79:18]
    io.in.ready <= _io_in_ready_T @[Sorter.scala 79:15]
    
