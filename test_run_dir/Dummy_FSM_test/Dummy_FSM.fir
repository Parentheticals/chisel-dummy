;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Dummy_FSM : 
  module Dummy_FSM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<4>}}
    
    reg state : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[dummy_FSM.scala 16:22]
    reg en_counter : UInt<1>, clock @[dummy_FSM.scala 19:23]
    state <= UInt<2>("h00") @[dummy_FSM.scala 22:9]
    io.in.ready <= UInt<1>("h00") @[dummy_FSM.scala 23:15]
    io.out.bits <= UInt<1>("h00") @[dummy_FSM.scala 24:15]
    io.out.valid <= UInt<1>("h00") @[dummy_FSM.scala 25:16]
    en_counter <= UInt<1>("h00") @[dummy_FSM.scala 26:14]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 60:40]
    when en_counter : @[dummy_FSM.scala 29:21]
      node wrap = eq(value, UInt<3>("h07")) @[Counter.scala 72:24]
      node _value_T = add(value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24]
      value <= _value_T_1 @[Counter.scala 76:15]
      skip @[dummy_FSM.scala 29:21]
    else : @[dummy_FSM.scala 31:16]
      value <= UInt<1>("h00") @[Counter.scala 97:11]
      skip @[dummy_FSM.scala 31:16]
    node _T = eq(UInt<2>("h00"), state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = and(io.in.valid, io.out.ready) @[dummy_FSM.scala 38:25]
      when _T_1 : @[dummy_FSM.scala 38:42]
        state <= UInt<2>("h01") @[dummy_FSM.scala 39:15]
        en_counter <= UInt<1>("h01") @[dummy_FSM.scala 40:20]
        skip @[dummy_FSM.scala 38:42]
      else : @[dummy_FSM.scala 41:19]
        io.in.ready <= UInt<1>("h01") @[dummy_FSM.scala 42:21]
        skip @[dummy_FSM.scala 41:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<2>("h01"), state) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = eq(value, UInt<3>("h06")) @[dummy_FSM.scala 47:27]
        when _T_3 : @[dummy_FSM.scala 47:37]
          state <= UInt<2>("h02") @[dummy_FSM.scala 48:15]
          skip @[dummy_FSM.scala 47:37]
        else : @[dummy_FSM.scala 49:19]
          state <= UInt<2>("h01") @[dummy_FSM.scala 50:15]
          en_counter <= UInt<1>("h01") @[dummy_FSM.scala 51:20]
          skip @[dummy_FSM.scala 49:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<2>("h02"), state) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          state <= UInt<2>("h00") @[dummy_FSM.scala 56:13]
          node _io_out_bits_T = add(io.in.bits, UInt<1>("h01")) @[dummy_FSM.scala 57:33]
          node _io_out_bits_T_1 = tail(_io_out_bits_T, 1) @[dummy_FSM.scala 57:33]
          io.out.bits <= _io_out_bits_T_1 @[dummy_FSM.scala 57:19]
          io.out.valid <= UInt<1>("h01") @[dummy_FSM.scala 58:20]
          value <= UInt<1>("h00") @[Counter.scala 97:11]
          skip @[Conditional.scala 39:67]
    
